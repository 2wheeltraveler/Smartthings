/**
 *  Toggle Door Lock
 *
 *  Copyright 2016 Darold Anderson
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Toggle Door Lock",
    namespace: "Darold",
    author: "Darold Anderson",
    description: "Use Virtual Switch to Open and Close Deadbolt",
    category: "My Apps",
    iconUrl: "http://cdn.device-icons.smartthings.com/Home/home3-icn.png",
    iconX2Url: "http://cdn.device-icons.smartthings.com/Home/home3-icn@2x.png",
    iconX3Url: "http://cdn.device-icons.smartthings.com/Home/home3-icn@2x.png")


preferences {
	section("When this button is pushed") {
		input "virtSwitch", "capability.momentary", title: "Momentary Switch", required: true
	}
    section("Control this door lock"){
		input "lock","capability.lock", title: "Lock", required: true
    }
   	section("paragraph") {
    	icon(required: false)
    }
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
	subscribe(virtSwitch, "momentary.push", lockHandler)
}

def lockHandler(evt) {
    log.debug "$evt.displayName was ${evt.value}"
	def lockState = lock.latestValue("lock")
    log.debug "Door is currently ${lockState}"
    
    if (lockState == "locked") {
    	log.debug "Unlocking door"
        lock.unlock()
	} else {
		if (lockState == "unlocked with timeout") {
    		log.debug "Locking door before timeout reached"
            lock.lock()
    	} else {
        	if (lockState == "unlocked") {
    			log.debug "Locking door"
            	lock.lock()
    		} else {
            	log.debug "Unknown state received ${lockState}"
            }
        }
    }
}
